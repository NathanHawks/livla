var camxes = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "text": parse_text,
        "any_word": parse_any_word,
        "lojban_word": parse_lojban_word,
        "cmevla": parse_cmevla,
        "zifcme": parse_zifcme,
        "cmavo": parse_cmavo,
        "gismu": parse_gismu,
        "gismu_like": parse_gismu_like,
        "fuhivla": parse_fuhivla,
        "fuhivla_like": parse_fuhivla_like,
        "fuhivla_head_extended": parse_fuhivla_head_extended,
        "fuhivla_head": parse_fuhivla_head,
        "lujvo": parse_lujvo,
        "brivla": parse_brivla,
        "brivla_core": parse_brivla_core,
        "CVCy_lujvo": parse_CVCy_lujvo,
        "any_fuhivla_rafsi": parse_any_fuhivla_rafsi,
        "initial_rafsi": parse_initial_rafsi,
        "stressed_fuhivla_rafsi": parse_stressed_fuhivla_rafsi,
        "fuhivla_rafsi": parse_fuhivla_rafsi,
        "rafsi_string": parse_rafsi_string,
        "gismu_CVV_final_rafsi": parse_gismu_CVV_final_rafsi,
        "short_final_rafsi": parse_short_final_rafsi,
        "y_rafsi": parse_y_rafsi,
        "short_rafsi": parse_short_rafsi,
        "stressed_y_less_rafsi": parse_stressed_y_less_rafsi,
        "y_less_rafsi": parse_y_less_rafsi,
        "CVC_CCV_rafsi": parse_CVC_CCV_rafsi,
        "CVC_rafsi": parse_CVC_rafsi,
        "CCV_rafsi": parse_CCV_rafsi,
        "CVV_rafsi": parse_CVV_rafsi,
        "hy_rafsi": parse_hy_rafsi,
        "r_hyphen": parse_r_hyphen,
        "final_syllable": parse_final_syllable,
        "unstressed_syllable": parse_unstressed_syllable,
        "stress": parse_stress,
        "any_syllable": parse_any_syllable,
        "syllable": parse_syllable,
        "consonantal_syllable": parse_consonantal_syllable,
        "coda": parse_coda,
        "onset": parse_onset,
        "nucleus": parse_nucleus,
        "glide": parse_glide,
        "diphthong": parse_diphthong,
        "vowel": parse_vowel,
        "a": parse_a,
        "e": parse_e,
        "i": parse_i,
        "o": parse_o,
        "u": parse_u,
        "y": parse_y,
        "cluster": parse_cluster,
        "initial_pair": parse_initial_pair,
        "initial": parse_initial,
        "affricate": parse_affricate,
        "liquid": parse_liquid,
        "consonant": parse_consonant,
        "syllabic": parse_syllabic,
        "voiced": parse_voiced,
        "unvoiced": parse_unvoiced,
        "l": parse_l,
        "m": parse_m,
        "n": parse_n,
        "r": parse_r,
        "b": parse_b,
        "d": parse_d,
        "g": parse_g,
        "v": parse_v,
        "j": parse_j,
        "z": parse_z,
        "s": parse_s,
        "c": parse_c,
        "x": parse_x,
        "k": parse_k,
        "f": parse_f,
        "p": parse_p,
        "t": parse_t,
        "h": parse_h,
        "post_word": parse_post_word,
        "pause": parse_pause,
        "space_char": parse_space_char,
        "spaces": parse_spaces,
        "EOF": parse_EOF
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "text";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_text() {
        var cacheKey = "text@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_spaces();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          result2 = parse_any_word();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_any_word();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return _node_nonempty("text", expr);})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_any_word() {
        var cacheKey = "any_word@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_lojban_word();
        if (result0 !== null) {
          result1 = parse_spaces();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return expr;})(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lojban_word() {
        var cacheKey = "lojban_word@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_cmevla();
        if (result0 === null) {
          result0 = parse_cmavo();
          if (result0 === null) {
            result0 = parse_gismu();
            if (result0 === null) {
              result0 = parse_fuhivla();
              if (result0 === null) {
                result0 = parse_lujvo();
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cmevla() {
        var cacheKey = "cmevla@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_zifcme();
        reportFailures--;
        if (result0 !== null) {
          result0 = "";
          pos = pos2;
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_any_syllable();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_any_syllable();
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_pause();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          result0 = parse_zifcme();
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) { return ["cmevla", _join(expr)]; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_zifcme() {
        var cacheKey = "zifcme@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        result0 = parse_h();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_nucleus();
          if (result2 === null) {
            result2 = parse_glide();
            if (result2 === null) {
              result2 = parse_h();
              if (result2 === null) {
                pos1 = pos;
                result2 = parse_consonant();
                if (result2 !== null) {
                  pos2 = pos;
                  reportFailures++;
                  result3 = parse_pause();
                  reportFailures--;
                  if (result3 === null) {
                    result3 = "";
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_nucleus();
            if (result2 === null) {
              result2 = parse_glide();
              if (result2 === null) {
                result2 = parse_h();
                if (result2 === null) {
                  pos1 = pos;
                  result2 = parse_consonant();
                  if (result2 !== null) {
                    pos2 = pos;
                    reportFailures++;
                    result3 = parse_pause();
                    reportFailures--;
                    if (result3 === null) {
                      result3 = "";
                    } else {
                      result3 = null;
                      pos = pos2;
                    }
                    if (result3 !== null) {
                      result2 = [result2, result3];
                    } else {
                      result2 = null;
                      pos = pos1;
                    }
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_consonant();
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_pause();
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos1;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cmavo() {
        var cacheKey = "cmavo@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_cmevla();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_CVCy_lujvo();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_h();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_cluster();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 !== null) {
                result4 = parse_onset();
                if (result4 !== null) {
                  result5 = [];
                  pos2 = pos;
                  result6 = parse_nucleus();
                  if (result6 !== null) {
                    result7 = parse_h();
                    if (result7 !== null) {
                      result6 = [result6, result7];
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                  } else {
                    result6 = null;
                    pos = pos2;
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    pos2 = pos;
                    result6 = parse_nucleus();
                    if (result6 !== null) {
                      result7 = parse_h();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos2;
                      }
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_nucleus();
                    if (result6 !== null) {
                      pos2 = pos;
                      reportFailures++;
                      result7 = parse_cluster();
                      reportFailures--;
                      if (result7 === null) {
                        result7 = "";
                      } else {
                        result7 = null;
                        pos = pos2;
                      }
                      if (result7 !== null) {
                        pos2 = pos;
                        reportFailures++;
                        result8 = parse_post_word();
                        reportFailures--;
                        if (result8 !== null) {
                          result8 = "";
                          pos = pos2;
                        } else {
                          result8 = null;
                        }
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["cmavo", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_gismu() {
        var cacheKey = "gismu@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_gismu_like();
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["gismu", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_gismu_like() {
        var cacheKey = "gismu_like@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_CVC_CCV_rafsi();
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_stress();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos1;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_final_syllable();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos1;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_consonant();
              if (result3 !== null) {
                result4 = parse_vowel();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_fuhivla() {
        var cacheKey = "fuhivla@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_fuhivla_like();
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["fuhivla", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_fuhivla_like() {
        var cacheKey = "fuhivla_like@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_fuhivla_head_extended();
        if (result0 !== null) {
          result1 = parse_final_syllable();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_fuhivla_head_extended() {
        var cacheKey = "fuhivla_head_extended@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_fuhivla_head();
        if (result0 !== null) {
          result1 = parse_syllable();
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_stress();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos1;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_consonantal_syllable();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_consonantal_syllable();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_fuhivla_head() {
        var cacheKey = "fuhivla_head@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        result0 = parse_rafsi_string();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_cmavo();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            pos2 = pos;
            pos3 = pos;
            reportFailures++;
            result2 = parse_rafsi_string();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result3 = parse_consonant();
              if (result3 !== null) {
                result4 = parse_rafsi_string();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_h();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_onset();
                reportFailures--;
                if (result4 !== null) {
                  result4 = "";
                  pos = pos1;
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_unstressed_syllable();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_unstressed_syllable();
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lujvo() {
        var cacheKey = "lujvo@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_gismu();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_fuhivla();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result2 = parse_brivla();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {return ["lujvo", _join(expr)];})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_brivla() {
        var cacheKey = "brivla@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        result0 = parse_cmavo();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          pos2 = pos;
          result1 = parse_CCV_rafsi();
          if (result1 !== null) {
            result2 = parse_h();
            if (result2 !== null) {
              result3 = parse_y();
              if (result3 !== null) {
                result4 = parse_onset();
                if (result4 !== null) {
                  result1 = [result1, result2, result3, result4];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_initial_rafsi();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_initial_rafsi();
            }
            if (result2 !== null) {
              result3 = parse_brivla_core();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_brivla_core() {
        var cacheKey = "brivla_core@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1, pos2, pos3;
        
        result0 = parse_fuhivla_like();
        if (result0 === null) {
          result0 = parse_gismu_CVV_final_rafsi();
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_hy_rafsi();
            if (result0 === null) {
              result0 = parse_y_rafsi();
              if (result0 === null) {
                pos2 = pos;
                result0 = parse_short_rafsi();
                if (result0 !== null) {
                  pos3 = pos;
                  reportFailures++;
                  result1 = parse_y();
                  reportFailures--;
                  if (result1 === null) {
                    result1 = "";
                  } else {
                    result1 = null;
                    pos = pos3;
                  }
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                } else {
                  result0 = null;
                  pos = pos2;
                }
              }
            }
            if (result0 !== null) {
              pos2 = pos;
              reportFailures++;
              result1 = parse_stress();
              reportFailures--;
              if (result1 !== null) {
                result1 = "";
                pos = pos2;
              } else {
                result1 = null;
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 === null) {
              result0 = parse_stressed_fuhivla_rafsi();
            }
            if (result0 !== null) {
              result1 = parse_short_final_rafsi();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CVCy_lujvo() {
        var cacheKey = "CVCy_lujvo@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        result0 = parse_CVC_rafsi();
        if (result0 !== null) {
          pos1 = pos;
          pos2 = pos;
          reportFailures++;
          result1 = parse_stress();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result2 = parse_y();
            if (result2 !== null) {
              result3 = parse_h();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = [];
                result5 = parse_initial_rafsi();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_initial_rafsi();
                }
                if (result4 !== null) {
                  result5 = parse_brivla_core();
                  if (result5 !== null) {
                    result1 = [result1, result2, result3, result4, result5];
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 === null) {
            pos1 = pos;
            pos2 = pos;
            reportFailures++;
            result1 = parse_stress();
            reportFailures--;
            if (result1 !== null) {
              result1 = "";
              pos = pos2;
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_y();
              if (result2 !== null) {
                result3 = parse_short_final_rafsi();
                if (result3 !== null) {
                  result1 = [result1, result2, result3];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_any_fuhivla_rafsi() {
        var cacheKey = "any_fuhivla_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_fuhivla_like();
        if (result0 === null) {
          result0 = parse_fuhivla_rafsi();
          if (result0 === null) {
            result0 = parse_stressed_fuhivla_rafsi();
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_initial_rafsi() {
        var cacheKey = "initial_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_hy_rafsi();
        if (result0 === null) {
          result0 = parse_y_rafsi();
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_stress();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result2 = parse_h();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_fuhivla_rafsi();
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            reportFailures++;
            result0 = parse_any_fuhivla_rafsi();
            reportFailures--;
            if (result0 === null) {
              result0 = "";
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result1 = parse_y_less_rafsi();
              if (result1 !== null) {
                pos1 = pos;
                reportFailures++;
                result2 = parse_any_fuhivla_rafsi();
                reportFailures--;
                if (result2 === null) {
                  result2 = "";
                } else {
                  result2 = null;
                  pos = pos1;
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stressed_fuhivla_rafsi() {
        var cacheKey = "stressed_fuhivla_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_fuhivla_head_extended();
        if (result0 !== null) {
          result1 = parse_onset();
          if (result1 !== null) {
            result2 = parse_y();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_fuhivla_rafsi() {
        var cacheKey = "fuhivla_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        result0 = parse_unstressed_syllable();
        reportFailures--;
        if (result0 !== null) {
          result0 = "";
          pos = pos1;
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_fuhivla_head();
          if (result1 !== null) {
            result2 = parse_onset();
            if (result2 !== null) {
              result3 = parse_y();
              if (result3 !== null) {
                result4 = parse_h();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_rafsi_string() {
        var cacheKey = "rafsi_string@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_y_less_rafsi();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_y_less_rafsi();
        }
        if (result0 !== null) {
          result1 = parse_gismu_CVV_final_rafsi();
          if (result1 === null) {
            pos1 = pos;
            result1 = parse_stressed_y_less_rafsi();
            if (result1 !== null) {
              result2 = parse_short_final_rafsi();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
            if (result1 === null) {
              pos1 = pos;
              result1 = parse_y_rafsi();
              if (result1 !== null) {
                pos2 = pos;
                reportFailures++;
                result2 = parse_stress();
                reportFailures--;
                if (result2 === null) {
                  result2 = "";
                } else {
                  result2 = null;
                  pos = pos2;
                }
                if (result2 !== null) {
                  result3 = parse_h();
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result1 = [result1, result2, result3];
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
              if (result1 === null) {
                pos1 = pos;
                result1 = parse_y_rafsi();
                if (result1 !== null) {
                  pos2 = pos;
                  reportFailures++;
                  result2 = parse_stress();
                  reportFailures--;
                  if (result2 !== null) {
                    result2 = "";
                    pos = pos2;
                  } else {
                    result2 = null;
                  }
                  if (result2 !== null) {
                    result1 = [result1, result2];
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                } else {
                  result1 = null;
                  pos = pos1;
                }
                if (result1 === null) {
                  pos1 = pos;
                  result1 = parse_stressed_y_less_rafsi();
                  result1 = result1 !== null ? result1 : "";
                  if (result1 !== null) {
                    result2 = parse_initial_pair();
                    if (result2 !== null) {
                      result3 = parse_y();
                      if (result3 !== null) {
                        result1 = [result1, result2, result3];
                      } else {
                        result1 = null;
                        pos = pos1;
                      }
                    } else {
                      result1 = null;
                      pos = pos1;
                    }
                  } else {
                    result1 = null;
                    pos = pos1;
                  }
                  if (result1 === null) {
                    pos1 = pos;
                    result1 = parse_hy_rafsi();
                    if (result1 !== null) {
                      pos2 = pos;
                      pos3 = pos;
                      reportFailures++;
                      result2 = parse_stress();
                      reportFailures--;
                      if (result2 === null) {
                        result2 = "";
                      } else {
                        result2 = null;
                        pos = pos3;
                      }
                      if (result2 !== null) {
                        result3 = parse_h();
                        result3 = result3 !== null ? result3 : "";
                        if (result3 !== null) {
                          result2 = [result2, result3];
                        } else {
                          result2 = null;
                          pos = pos2;
                        }
                      } else {
                        result2 = null;
                        pos = pos2;
                      }
                      if (result2 === null) {
                        pos2 = pos;
                        reportFailures++;
                        result2 = parse_stress();
                        reportFailures--;
                        if (result2 !== null) {
                          result2 = "";
                          pos = pos2;
                        } else {
                          result2 = null;
                        }
                      }
                      if (result2 !== null) {
                        result1 = [result1, result2];
                      } else {
                        result1 = null;
                        pos = pos1;
                      }
                    } else {
                      result1 = null;
                      pos = pos1;
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_gismu_CVV_final_rafsi() {
        var cacheKey = "gismu_CVV_final_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        result0 = parse_gismu_like();
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_consonant();
          if (result0 !== null) {
            result1 = parse_vowel();
            if (result1 !== null) {
              pos1 = pos;
              reportFailures++;
              result2 = parse_stress();
              reportFailures--;
              if (result2 !== null) {
                result2 = "";
                pos = pos1;
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                result3 = parse_h();
                if (result3 !== null) {
                  pos1 = pos;
                  reportFailures++;
                  result4 = parse_final_syllable();
                  reportFailures--;
                  if (result4 !== null) {
                    result4 = "";
                    pos = pos1;
                  } else {
                    result4 = null;
                  }
                  if (result4 !== null) {
                    result5 = parse_vowel();
                    if (result5 !== null) {
                      pos1 = pos;
                      reportFailures++;
                      result6 = parse_post_word();
                      reportFailures--;
                      if (result6 !== null) {
                        result6 = "";
                        pos = pos1;
                      } else {
                        result6 = null;
                      }
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos0;
                      }
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_short_final_rafsi() {
        var cacheKey = "short_final_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        result0 = parse_final_syllable();
        reportFailures--;
        if (result0 !== null) {
          result0 = "";
          pos = pos1;
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_consonant();
          if (result1 !== null) {
            result2 = parse_diphthong();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 === null) {
            pos1 = pos;
            result1 = parse_initial_pair();
            if (result1 !== null) {
              result2 = parse_vowel();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_post_word();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos1;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_y_rafsi() {
        var cacheKey = "y_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_CVC_CCV_rafsi();
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_stress();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result2 = parse_consonant();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          result0 = parse_short_rafsi();
        }
        if (result0 !== null) {
          result1 = parse_y();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_short_rafsi() {
        var cacheKey = "short_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_CVC_CCV_rafsi();
        if (result0 === null) {
          result0 = parse_CVV_rafsi();
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stressed_y_less_rafsi() {
        var cacheKey = "stressed_y_less_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_short_rafsi();
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_stress();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos1;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_y();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_y_less_rafsi() {
        var cacheKey = "y_less_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        result0 = parse_y_rafsi();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result1 = parse_short_rafsi();
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_stress();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_h();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CVC_CCV_rafsi() {
        var cacheKey = "CVC_CCV_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_CVC_rafsi();
        if (result0 === null) {
          result0 = parse_CCV_rafsi();
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CVC_rafsi() {
        var cacheKey = "CVC_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_consonant();
        if (result0 !== null) {
          result1 = parse_vowel();
          if (result1 !== null) {
            result2 = parse_consonant();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CCV_rafsi() {
        var cacheKey = "CCV_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_initial_pair();
        if (result0 !== null) {
          result1 = parse_vowel();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CVV_rafsi() {
        var cacheKey = "CVV_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        result0 = parse_consonant();
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_vowel();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_stress();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos2;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_h();
              if (result3 !== null) {
                result4 = parse_vowel();
                if (result4 !== null) {
                  result1 = [result1, result2, result3, result4];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 === null) {
            result1 = parse_diphthong();
          }
          if (result1 !== null) {
            result2 = parse_r_hyphen();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_hy_rafsi() {
        var cacheKey = "hy_rafsi@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_gismu_like();
        if (result0 === null) {
          result0 = parse_short_rafsi();
        }
        if (result0 !== null) {
          result1 = parse_h();
          if (result1 !== null) {
            result2 = parse_y();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_r_hyphen() {
        var cacheKey = "r_hyphen@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_r();
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_consonant();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos1;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_n();
          if (result0 !== null) {
            pos1 = pos;
            reportFailures++;
            result1 = parse_r();
            reportFailures--;
            if (result1 !== null) {
              result1 = "";
              pos = pos1;
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_final_syllable() {
        var cacheKey = "final_syllable@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_onset();
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_y();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result2 = parse_nucleus();
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_cmevla();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_post_word();
                reportFailures--;
                if (result4 !== null) {
                  result4 = "";
                  pos = pos1;
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unstressed_syllable() {
        var cacheKey = "unstressed_syllable@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_syllable();
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_stress();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_consonantal_syllable();
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stress() {
        var cacheKey = "stress@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_consonant();
        if (result1 === null) {
          result1 = parse_glide();
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_consonant();
          if (result1 === null) {
            result1 = parse_glide();
          }
        }
        if (result0 !== null) {
          result1 = parse_h();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_y();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_syllable();
              if (result3 !== null) {
                result4 = parse_pause();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_any_syllable() {
        var cacheKey = "any_syllable@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_onset();
        if (result0 !== null) {
          result1 = parse_nucleus();
          if (result1 !== null) {
            result2 = parse_coda();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_consonantal_syllable();
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_syllable() {
        var cacheKey = "syllable@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_onset();
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_y();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result2 = parse_nucleus();
            if (result2 !== null) {
              result3 = parse_coda();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_consonantal_syllable() {
        var cacheKey = "consonantal_syllable@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_consonant();
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_syllabic();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos1;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_coda();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_coda() {
        var cacheKey = "coda@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        result0 = parse_any_syllable();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result1 = parse_consonant();
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_any_syllable();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = pos1;
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_syllabic();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_consonant();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              pos1 = pos;
              reportFailures++;
              result2 = parse_pause();
              reportFailures--;
              if (result2 !== null) {
                result2 = "";
                pos = pos1;
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_onset() {
        var cacheKey = "onset@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_h();
        if (result0 === null) {
          result0 = parse_glide();
          if (result0 === null) {
            result0 = parse_initial();
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nucleus() {
        var cacheKey = "nucleus@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        result0 = parse_vowel();
        if (result0 === null) {
          result0 = parse_diphthong();
          if (result0 === null) {
            pos0 = pos;
            result0 = parse_y();
            if (result0 !== null) {
              pos1 = pos;
              reportFailures++;
              result1 = parse_nucleus();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = pos1;
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_glide() {
        var cacheKey = "glide@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_i();
        if (result0 === null) {
          result0 = parse_u();
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_nucleus();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos1;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_diphthong() {
        var cacheKey = "diphthong@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_a();
        if (result0 !== null) {
          result1 = parse_u();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_u();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          pos2 = pos;
          result0 = parse_a();
          if (result0 !== null) {
            result1 = parse_i();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
          if (result0 === null) {
            pos2 = pos;
            result0 = parse_e();
            if (result0 !== null) {
              result1 = parse_i();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }
            if (result0 === null) {
              pos2 = pos;
              result0 = parse_o();
              if (result0 !== null) {
                result1 = parse_i();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos2;
                }
              } else {
                result0 = null;
                pos = pos2;
              }
            }
          }
          if (result0 !== null) {
            pos2 = pos;
            reportFailures++;
            result1 = parse_i();
            reportFailures--;
            if (result1 === null) {
              result1 = "";
            } else {
              result1 = null;
              pos = pos2;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_nucleus();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_vowel() {
        var cacheKey = "vowel@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_a();
        if (result0 === null) {
          result0 = parse_e();
          if (result0 === null) {
            result0 = parse_i();
            if (result0 === null) {
              result0 = parse_o();
              if (result0 === null) {
                result0 = parse_u();
              }
            }
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_nucleus();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_a() {
        var cacheKey = "a@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[a]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_e() {
        var cacheKey = "e@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[e]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[e]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_i() {
        var cacheKey = "i@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[i]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[i]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_o() {
        var cacheKey = "o@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[o]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[o]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_u() {
        var cacheKey = "u@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[u]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[u]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_y() {
        var cacheKey = "y@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        if (/^[y]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[y]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          pos2 = pos;
          pos3 = pos;
          reportFailures++;
          result1 = parse_y();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos3;
          }
          if (result1 !== null) {
            result2 = parse_nucleus();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cluster() {
        var cacheKey = "cluster@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_consonant();
        if (result0 !== null) {
          result2 = parse_consonant();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_consonant();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_initial_pair() {
        var cacheKey = "initial_pair@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        result0 = parse_initial();
        reportFailures--;
        if (result0 !== null) {
          result0 = "";
          pos = pos1;
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_consonant();
          if (result1 !== null) {
            result2 = parse_consonant();
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_consonant();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_initial() {
        var cacheKey = "initial@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        result0 = parse_affricate();
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_c();
          if (result0 === null) {
            pos2 = pos;
            result0 = parse_s();
            if (result0 !== null) {
              pos3 = pos;
              reportFailures++;
              result1 = parse_x();
              reportFailures--;
              if (result1 === null) {
                result1 = "";
              } else {
                result1 = null;
                pos = pos3;
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }
            if (result0 === null) {
              pos2 = pos;
              result0 = parse_j();
              if (result0 === null) {
                result0 = parse_z();
              }
              if (result0 !== null) {
                pos3 = pos;
                reportFailures++;
                result1 = parse_n();
                reportFailures--;
                if (result1 === null) {
                  result1 = "";
                } else {
                  result1 = null;
                  pos = pos3;
                }
                if (result1 !== null) {
                  pos3 = pos;
                  reportFailures++;
                  result2 = parse_liquid();
                  reportFailures--;
                  if (result2 === null) {
                    result2 = "";
                  } else {
                    result2 = null;
                    pos = pos3;
                  }
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                } else {
                  result0 = null;
                  pos = pos2;
                }
              } else {
                result0 = null;
                pos = pos2;
              }
            }
          }
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_p();
            if (result1 === null) {
              pos2 = pos;
              result1 = parse_t();
              if (result1 !== null) {
                pos3 = pos;
                reportFailures++;
                result2 = parse_l();
                reportFailures--;
                if (result2 === null) {
                  result2 = "";
                } else {
                  result2 = null;
                  pos = pos3;
                }
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              if (result1 === null) {
                result1 = parse_k();
                if (result1 === null) {
                  result1 = parse_f();
                  if (result1 === null) {
                    result1 = parse_x();
                    if (result1 === null) {
                      result1 = parse_b();
                      if (result1 === null) {
                        pos2 = pos;
                        result1 = parse_d();
                        if (result1 !== null) {
                          pos3 = pos;
                          reportFailures++;
                          result2 = parse_l();
                          reportFailures--;
                          if (result2 === null) {
                            result2 = "";
                          } else {
                            result2 = null;
                            pos = pos3;
                          }
                          if (result2 !== null) {
                            result1 = [result1, result2];
                          } else {
                            result1 = null;
                            pos = pos2;
                          }
                        } else {
                          result1 = null;
                          pos = pos2;
                        }
                        if (result1 === null) {
                          result1 = parse_g();
                          if (result1 === null) {
                            result1 = parse_v();
                            if (result1 === null) {
                              result1 = parse_m();
                              if (result1 === null) {
                                pos2 = pos;
                                result1 = parse_n();
                                if (result1 !== null) {
                                  pos3 = pos;
                                  reportFailures++;
                                  result2 = parse_liquid();
                                  reportFailures--;
                                  if (result2 === null) {
                                    result2 = "";
                                  } else {
                                    result2 = null;
                                    pos = pos3;
                                  }
                                  if (result2 !== null) {
                                    result1 = [result1, result2];
                                  } else {
                                    result1 = null;
                                    pos = pos2;
                                  }
                                } else {
                                  result1 = null;
                                  pos = pos2;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result2 = parse_liquid();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_consonant();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_affricate() {
        var cacheKey = "affricate@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = parse_t();
        if (result0 !== null) {
          result1 = parse_c();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_t();
          if (result0 !== null) {
            result1 = parse_s();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            result0 = parse_d();
            if (result0 !== null) {
              result1 = parse_j();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              result0 = parse_d();
              if (result0 !== null) {
                result1 = parse_z();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_liquid() {
        var cacheKey = "liquid@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_l();
        if (result0 === null) {
          result0 = parse_r();
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_consonant() {
        var cacheKey = "consonant@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_voiced();
        if (result0 === null) {
          result0 = parse_unvoiced();
          if (result0 === null) {
            result0 = parse_syllabic();
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_syllabic() {
        var cacheKey = "syllabic@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_l();
        if (result0 === null) {
          result0 = parse_m();
          if (result0 === null) {
            result0 = parse_n();
            if (result0 === null) {
              result0 = parse_r();
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_voiced() {
        var cacheKey = "voiced@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_b();
        if (result0 === null) {
          result0 = parse_d();
          if (result0 === null) {
            result0 = parse_g();
            if (result0 === null) {
              result0 = parse_j();
              if (result0 === null) {
                result0 = parse_v();
                if (result0 === null) {
                  result0 = parse_z();
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unvoiced() {
        var cacheKey = "unvoiced@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_c();
        if (result0 === null) {
          result0 = parse_f();
          if (result0 === null) {
            result0 = parse_k();
            if (result0 === null) {
              result0 = parse_p();
              if (result0 === null) {
                result0 = parse_s();
                if (result0 === null) {
                  result0 = parse_t();
                  if (result0 === null) {
                    result0 = parse_x();
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_l() {
        var cacheKey = "l@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[l]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[l]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_l();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_m() {
        var cacheKey = "m@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[m]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[m]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_m();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_z();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_n() {
        var cacheKey = "n@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[n]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[n]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_n();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_affricate();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_r() {
        var cacheKey = "r@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[r]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[r]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_r();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_b() {
        var cacheKey = "b@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[b]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[b]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_b();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_unvoiced();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_d() {
        var cacheKey = "d@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[d]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[d]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_d();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_unvoiced();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_g() {
        var cacheKey = "g@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[g]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[g]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_g();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_unvoiced();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_v() {
        var cacheKey = "v@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[v]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[v]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_v();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_unvoiced();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_j() {
        var cacheKey = "j@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[j]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[j]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_j();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_z();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  pos1 = pos;
                  reportFailures++;
                  result5 = parse_unvoiced();
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos1;
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_z() {
        var cacheKey = "z@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[z]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_z();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_j();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  pos1 = pos;
                  reportFailures++;
                  result5 = parse_unvoiced();
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos1;
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_s() {
        var cacheKey = "s@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[s]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[s]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_s();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_c();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  pos1 = pos;
                  reportFailures++;
                  result5 = parse_voiced();
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos1;
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_c() {
        var cacheKey = "c@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[c]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[c]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_c();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_s();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  pos1 = pos;
                  reportFailures++;
                  result5 = parse_x();
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos1;
                  }
                  if (result5 !== null) {
                    pos1 = pos;
                    reportFailures++;
                    result6 = parse_voiced();
                    reportFailures--;
                    if (result6 === null) {
                      result6 = "";
                    } else {
                      result6 = null;
                      pos = pos1;
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_x() {
        var cacheKey = "x@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[x]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[x]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_x();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_c();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  pos1 = pos;
                  reportFailures++;
                  result5 = parse_k();
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos1;
                  }
                  if (result5 !== null) {
                    pos1 = pos;
                    reportFailures++;
                    result6 = parse_voiced();
                    reportFailures--;
                    if (result6 === null) {
                      result6 = "";
                    } else {
                      result6 = null;
                      pos = pos1;
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_k() {
        var cacheKey = "k@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[k]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[k]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_k();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_x();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  pos1 = pos;
                  reportFailures++;
                  result5 = parse_voiced();
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos1;
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_f() {
        var cacheKey = "f@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[f]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[f]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_f();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_voiced();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_p() {
        var cacheKey = "p@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[p]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[p]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_p();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_voiced();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_t() {
        var cacheKey = "t@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^[t]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[t]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_h();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            result2 = parse_glide();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              pos1 = pos;
              reportFailures++;
              result3 = parse_t();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                pos1 = pos;
                reportFailures++;
                result4 = parse_voiced();
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos1;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_h() {
        var cacheKey = "h@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        if (/^['h]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("['h]");
          }
        }
        if (result0 !== null) {
          pos1 = pos;
          reportFailures++;
          result1 = parse_nucleus();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos1;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_post_word() {
        var cacheKey = "post_word@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        result0 = parse_pause();
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          reportFailures++;
          result0 = parse_nucleus();
          reportFailures--;
          if (result0 === null) {
            result0 = "";
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result1 = parse_lojban_word();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_pause() {
        var cacheKey = "pause@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        
        result1 = parse_space_char();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_space_char();
          }
        } else {
          result0 = null;
        }
        if (result0 === null) {
          result0 = parse_EOF();
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space_char() {
        var cacheKey = "space_char@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[.\t\n\r?! ]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[.\\t\\n\\r?! ]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_spaces() {
        var cacheKey = "spaces@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result1 = parse_space_char();
        if (result1 === null) {
          result1 = parse_y();
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_space_char();
            if (result1 === null) {
              result1 = parse_y();
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_EOF();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_EOF();
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EOF() {
        var cacheKey = "EOF@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        reportFailures++;
        if (input.length > pos) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
        function _join(arg)
        {
          if (typeof(arg) == "string")
            return arg;
          else
          {
            var ret = "";
            for (var v in arg) { ret += _join(arg[v]); }
            return ret;
          }
        }
      
        function _node(label, arg)
        {
          var ret = [];
          if (label != undefined) ret.push( label );
          if (typeof( arg ) == "object" && typeof( arg[0] ) == "string" && arg[0] != "")
          {
            ret.push( arg );
            return ret;
          }
          return _node_int(label, arg);
        }
      
        function _node_int(label, arg)
        {
          if (typeof( arg ) == "string")
            return arg;
          var ret = [];
          if (label != undefined) ret.push( label );
          for (var v in arg)
          {
            if (arg[v].length != 0)
              ret.push( _node_int( undefined, arg[v] ) );
          }
          return ret;
        }
      
        function _node_nonempty(label, arg)
        {
          var _n = _node(label, arg);
          return (_n.length == 1 && _n[0] == label) ? [] : _n;
        }
      
        function is_string(v) {
          return typeof v.valueOf() === 'string';
        }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})()

module.exports = camxes;

term = process.argv[2];
if (term !== undefined && typeof term.valueOf() === 'string')
  console.log(JSON.stringify(camxes.parse(term)));

