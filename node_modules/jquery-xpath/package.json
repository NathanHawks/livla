{
  "name": "jquery-xpath",
  "title": "jQuery XPath plugin",
  "description": "jQuery plugin for querying XML and HTML documents with XPath 2.0",
  "version": "0.2.5",
  "homepage": "https://github.com/ilinsky/jquery-xpath",
  "author": {
    "name": "Sergey Ilinsky",
    "email": "sergey@ilinsky.com",
    "url": "http://www.ilinsky.com"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ilinsky/jquery-xpath/blob/master/res/license/MIT-LICENSE.txt"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/ilinsky/jquery-xpath.git"
  },
  "bugs": {
    "url": "https://github.com/ilinsky/jquery-xpath/issues"
  },
  "keywords": [
    "jquery",
    "xpath",
    "xpath2"
  ],
  "dependencies": {
    "jquery": ">=1.0.0"
  },
  "readme": "jQuery XPath plugin\n=============\n\nThis plugin is a fully featured XPath 2.0 query language implementation which can be used to query both HTML and XML documents in all web browsers.\nIt uses the DOM-agnostic XPath 2.0 engine [xpath.js](https://github.com/ilinsky/xpath.js) originally developed for [Ample SDK UI Framework](https://github.com/clientside/amplesdk).\n\nUsage\n-----------------\n\nDownload and include ` jquery.xpath.js ` or ` jquery.xpath.min.js ` file on your page.\nPlease be aware that the 'min' version does not have the detailed error messages that the ` jquery.xpath.js ` has but has been efficiently minimised to reduce its file size.\n\n```html\n<script type=\"text/javascript\" src=\"jquery.xpath.js\"></script>\n```\n\nAPI Reference\n-----------------\n\njQuery XPath plugin comes with two easy to use entrance points:\n\n1. ` $(context).xpath(expression, resolver) `\n2. ` $.xpath(context, expression, resolver) `\n\nIn both cases the `resolver` function type parameter is optional and is only needed when the expression contains prefixes.\nIn cases where the expression does not touch the document, the node type `context` parameter is not required.\n\nBelow are the sample queries.\n\n### Running queries with context ###\n\n```js\n$(document).xpath(\"*\"); // Returns {Element} html (direct child of context item - document)\n$(document).xpath(\"//head << //body\"); // Returns {Boolean} true (head is preceding body)\n$(document).xpath(\"//*[parent::html][last()]\") // Returns {Element} body (last child of html)\n$(document.body).xpath(\"count(ancestor::node())\"); // Returns {Number} 2 (2 ancestor nodes)\n$(document.body).xpath(\"preceding-sibling::element()\"); // Returns {Element} head (prev sibling)\n$(document.documentElement).xpath(\"body | head\"); // Returns {Element} head and body (ordered)\n$(document.documentElement).xpath(\"body, head\"); // Returns {Element} body and head (not ordered)\n```\n\n### Running queries that do not require context ###\n\n```js\n$().xpath(\"0.1+0.2\"); // Returns {Number} 0.3 (Note: in JavaScript it returns 0.30000000000000004)\n$().xpath(\"xs:date('2012-12-12')-xs:yearMonthDuration('P1Y1M')\"); // Returns {String} '2011-11-12'\n$().xpath(\"2 to 5\"); // Returns {Number} 2, 3, 4 and 5\n$().xpath(\"for $var in (1, 2, 3) return $var * 3\"); // Returns {Number} 3, 6 and 9\n$().xpath(\"round-half-to-even(35540, -2)\"); // Returns {Number} 35500\n$().xpath(\"translate('bar','abc','ABC')\"); // Returns {String} BAr\n$().xpath(\"matches('helloworld', 'hello world', 'x')\"); // Returns {Boolean} true\n$().xpath(\"xs:double('-INF') castable as xs:decimal)\"); // Returns {Boolean} false\n$().xpath(\"1e2 instance of xs:double\"); //  Returns {Boolean} true\n$().xpath(\"1.5 cast as xs:integer\"); // Returns {Number} 1\n```\n\n### Running queries with prefixes ###\n\n```js\n$(document).xpath(\"//my:body\", function(prefix) {\n\tif (prefix == \"my\")\n\t\treturn \"http://www.w3.org/1999/xhtml\";\n});\t// Returns {Element} body ('my' prefix resolved to XHTML namespace)\n```\n\nError reporting\n-----------------\nUnlike browser's native XPath 1.0 processing which have very poor error reporting, the jQuery XPath plugin reports syntax and evaluation errors with a great level of detail.\nProvided that XPath expressions are not easy, it is extremely helpful to have good level of feedback from the processor.\n\nBelow are examples of the detailed error reporting.\n\n### Syntax errors ###\n```js\n$().xpath(\"1 to \"); // Throws \"Error: Expected second operand in range expression\"\n$().xpath(\"$*\"); // Throws \"Error: Illegal use of wildcard in var expression variable name\"\n$(document).xpath(\"self::document()\"); // Throws \"Error: Unknown 'document' kind test\"\n```\n\n### Evaluation errors ###\n\n```js\n$().xpath(\"1+'2'\") // Throws \"Error: Arithmetic operator is not defined for provided arguments\"\n$().xpath(\"self::node()\"); // Throws \"Error: In an axis step, the context item is not a node.\"\n$().xpath(\"max((1,'2'))\"); // Throws \"Error: Input to max() contains a mix of not comparable values\"\n```\n\n### XPath 2.0 trace() function ###\n\n``` trace ``` is a very helpful XPath 2.0 function, that will let you print the result of the sub-expression\nduring its evaluation right into the browser console log.\nFunction ``` trace ``` requires 2 arguments: first - any type, second - string, it prints its arguments to the console and returns the first argument to the evaluator.\n\n```js\n$().xpath(\"for $a in (1, 2), $b in (3 to 4) return trace($b, 'b: ') - $a\"); // See browser console\n```\n\nBear in mind that the items reported will either have a type of nodes, or internal XML Schema data types ;)\n\n",
  "readmeFilename": "README.md",
  "_id": "jquery-xpath@0.2.5",
  "dist": {
    "shasum": "74cccc778b273cef3890ff1f32aa07b3aad56167"
  },
  "_from": "jquery-xpath@",
  "_resolved": "https://registry.npmjs.org/jquery-xpath/-/jquery-xpath-0.2.5.tgz"
}
