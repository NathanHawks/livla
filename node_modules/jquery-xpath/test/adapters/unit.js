$(document).ready(function(){
	// Get XML document
	var request	= new XMLHttpRequest;
	request.open("GET", "data/test.xml?nocache=" + Math.random(), false);
	request.send();

	// XML Tests (created with DOMParser)
	var xml	= new DOMParser().parseFromString(request.responseText, "text/xml");
	// Kind Tests

	test("DOMParser_KindTest_Node", function() {
		assertEquals(19,
				evaluateXPathNumber('count(descendant-or-self::node())', xml));
	});

	test("DOMParser_KindTest_DocumentNode", function() {
		assertEquals(1,
				evaluateXPathNumber('count(descendant-or-self::document-node())', xml));
	});

	test("DOMParser_KindTest_Element", function() {
		assertEquals(5,
				evaluateXPathNumber('count(descendant-or-self::element())', xml));
	});

	test("DOMParser_KindTest_Attribute", function() {
		assertEquals(13,
				evaluateXPathNumber('count(descendant-or-self::*/attribute())', xml));
	});

	test("DOMParser_KindTest_ProcessingInstruction", function() {
		assertEquals(2,
				evaluateXPathNumber('count(descendant-or-self::processing-instruction())', xml));
	});

	test("DOMParser_KindTest_Comment", function() {
		assertEquals(2,
				evaluateXPathNumber('count(descendant-or-self::comment())', xml));
	});

	test("DOMParser_KindTest_Text", function() {
		assertEquals(4,
				evaluateXPathNumber('count(descendant-or-self::text()[normalize-space() ne ""])', xml));
	});

	// Name Tests
	test("DOMParser_NameTest_Element", function() {
		assertEquals(1,
				evaluateXPathNumber('count(descendant-or-self::ele)', xml));
	});

	test("DOMParser_NameTest_Element_LocalNameWC", function() {
		assertEquals(5,
				evaluateXPathNumber('count(descendant-or-self::*)', xml));
	});

	test("DOMParser_NameTest_ElementNS", function() {
		assertEquals(2,
				evaluateXPathNumber('count(descendant-or-self::ns:ele)', xml));
	});

	test("DOMParser_NameTest_ElementNS_LocalNameWC", function() {
		assertEquals(3,
				evaluateXPathNumber('count(descendant-or-self::ns:*)', xml));
	});

	test("DOMParser_NameTest_ElementNS_PrefixWC", function() {
		assertEquals(3,
				evaluateXPathNumber('count(descendant-or-self::*:ele)', xml));
	});

	//
	test("DOMParser_NameTest_Attribute", function() {
		assertEquals(3,
				evaluateXPathNumber('count(descendant-or-self::*/@att)', xml));
	});

	test("DOMParser_NameTest_Attribute_LocalNameWC", function() {
		assertEquals(13,
				evaluateXPathNumber('count(descendant-or-self::*/@*)', xml));
	});

	test("DOMParser_NameTest_AttributeNS", function() {
		assertEquals(2,
				evaluateXPathNumber('count(descendant-or-self::*/@ns:att)', xml));
	});

	test("DOMParser_NameTest_AttributeNS_LocalNameWC", function() {
		assertEquals(4,
				evaluateXPathNumber('count(descendant-or-self::*/@ns:*)', xml));
	});

	test("DOMParser_NameTest_AttributeNS_PrefixWC", function() {
		assertEquals(5,
				evaluateXPathNumber('count(descendant-or-self::*/@*:att)', xml));
	});

	// Misc
	test("DOMParser_BaseUri", function() {
		assertEquals("http://my_base/",
				evaluateXPathString('base-uri(descendant-or-self::*[2])', xml));
	});

	test("DOMParser_FunctionCall_Id", function() {
		assertEquals("id-root",
				evaluateXPathString('string(id("id-root")/@id)', xml));
	});

	// Atomize
	test("DOMParser_Atomize_DocumentNode", function() {
		assertEquals(true,
				evaluateXPathString('string(/)', xml).indexOf("text2") != -1);
	});

	test("DOMParser_Atomize_Element", function() {
		assertEquals(" cdata ",
				evaluateXPathString('string(//ns:ele[1])', xml));
	});

	test("DOMParser_Atomize_Attribute", function() {
		assertEquals("att-no_ns",
				evaluateXPathString('string(//ns:ele[1]/@att)', xml));
	});

	test("DOMParser_Atomize_ProcessingInstruction", function() {
		assertEquals('href="custom.url" ',
				evaluateXPathString('string(descendant-or-self::processing-instruction()[1])', xml));
	});

	test("DOMParser_Atomize_Comment", function() {
		assertEquals(" comment ",
				evaluateXPathString('string(descendant-or-self::comment()[1])', xml));
	});

	test("DOMParser_Atomize_Text", function() {
		assertEquals(" cdata ",
				evaluateXPathString('string(//ns:ele[1]/text())', xml));
	});

	// 'node' functions
	// name()
	test("DOMParser_Name_DocumentNode", function() {
		assertEquals('',
				evaluateXPathString('/name()', xml));
	});

	test("DOMParser_Name_Element", function() {
		assertEquals("ele",
				evaluateXPathString('//ns:ele[1]/name()', xml));
		assertEquals("ele",
				evaluateXPathString('descendant-or-self::*[2]/name()', xml));
		assertEquals("ele",
				evaluateXPathString('descendant-or-self::*[3]/name()', xml));
	});

	test("DOMParser_Name_Attribute", function() {
		assertEquals("my:att",
				evaluateXPathString('//ns:ele[1]/@ns:att/name()', xml));
		assertEquals("att",
				evaluateXPathString('//ns:ele[1]/@att/name()', xml));
	});

	test("DOMParser_Name_ProcessingInstruction", function() {
		assertEquals("custom",
				evaluateXPathString('descendant-or-self::processing-instruction()[1]/name()', xml));
	});

	test("DOMParser_Name_Comment", function() {
		assertEquals("",
				evaluateXPathString('descendant-or-self::comment()[1]/name()', xml));
	});

	test("DOMParser_Name_Text", function() {
		assertEquals("",
				evaluateXPathString('//ns:ele[1]/text()/name()', xml));
	});

	// local-name()
	test("DOMParser_LocalName_DocumentNode", function() {
		assertEquals('',
				evaluateXPathString('/local-name()', xml));
	});

	test("DOMParser_LocalName_Element", function() {
		assertEquals("ele",
				evaluateXPathString('//ns:ele[1]/local-name()', xml));
	});

	test("DOMParser_LocalName_Attribute", function() {
		assertEquals("att",
				evaluateXPathString('//ns:ele[1]/@ns:att/local-name()', xml));
	});

	test("DOMParser_LocalName_ProcessingInstruction", function() {
		assertEquals("",
				evaluateXPathString('descendant-or-self::processing-instruction()[1]/local-name()', xml));
	});

	test("DOMParser_LocalName_Comment", function() {
		assertEquals("",
				evaluateXPathString('descendant-or-self::comment()[1]/local-name()', xml));
	});

	test("DOMParser_LocalName_Text", function() {
		assertEquals("",
				evaluateXPathString('//ns:ele[1]/text()/local-name()', xml));
	});

	// namespace-uri()
	test("DOMParser_NamespaceURI_DocumentNode", function() {
		assertEquals('',
				evaluateXPathString('/namespace-uri()', xml));
	});

	test("DOMParser_NamespaceURI_Element", function() {
		assertEquals("my_ns",
				evaluateXPathString('//ns:ele[1]/namespace-uri()', xml));
		assertEquals("",
				evaluateXPathString('descendant-or-self::*[2]/namespace-uri()', xml));
		assertEquals("my_ns",
				evaluateXPathString('descendant-or-self::*[3]/namespace-uri()', xml));
	});

	test("DOMParser_NamespaceURI_Attribute", function() {
		assertEquals("my_ns",
				evaluateXPathString('//ns:ele[1]/@ns:att/namespace-uri()', xml));
		assertEquals("",
				evaluateXPathString('//ns:ele[1]/@att/namespace-uri()', xml));
	});

	test("DOMParser_NamespaceURI_ProcessingInstruction", function() {
		assertEquals("",
				evaluateXPathString('descendant-or-self::processing-instruction()[1]/namespace-uri()', xml));
	});

	test("DOMParser_NamespaceURI_Comment", function() {
		assertEquals("",
				evaluateXPathString('descendant-or-self::comment()[1]/namespace-uri()', xml));
	});

	test("DOMParser_NamespaceURI_Text", function() {
		assertEquals("",
				evaluateXPathString('//ns:ele[1]/text()/namespace-uri()', xml));
	});

	// 'accessor' functions
	// node-name()
/*	test("DOMParser_NodeName_DocumentNode", function() {
		assertEquals('',
				evaluateXPathString('/node-name()', xml));
	});

	test("DOMParser_NodeName_Element", function() {
		assertEquals("ele",
				evaluateXPathString('//ns:ele[1]/node-name()', xml));
	});

	test("DOMParser_NodeName_Attribute", function() {
		assertEquals("att",
				evaluateXPathString('//ns:ele[1]/@ns:att/node-name()', xml));
	});

	test("DOMParser_NodeName_ProcessingInstruction", function() {
		assertEquals("",
				evaluateXPathString('descendant-or-self::processing-instruction()[1]/node-name()', xml));
	});

	test("DOMParser_NodeName_Comment", function() {
		assertEquals("",
				evaluateXPathString('descendant-or-self::comment()[1]/node-name()', xml));
	});

	test("DOMParser_NodeName_Text", function() {
		assertEquals("",
				evaluateXPathString('//ns:ele[1]/text()/node-name()', xml));
	});*/

	// XML Tests (provided by XMLHttpRequest.responseXML)
	var xhr	= request.responseXML;
	// TODO: Duplicate from above

	// HTML Tests
	var html	= document;
	test("HTML_NameTest_Element", function() {
		assertEquals(2,
				evaluateXPathNumber('count(descendant-or-self::p)', html));
	});

	test("HTML_NameTest_Attribute", function() {
		assertEquals(2,
				evaluateXPathNumber('count(descendant-or-self::*/@att)', html));
	});

	// Misc
	test("HTML_FunctionCall_Id", function() {
		assertEquals("id-root",
				evaluateXPathString('string(id("id-root")/@id)', html));
	});

	// Atomize
	test("HTML_Atomize_DocumentNode", function() {
		assertEquals(true,
				evaluateXPathString('string(/)', html).indexOf("JsUnit testing page") != -1);
	});

	test("HTML_Atomize_Element", function() {
		assertEquals("some element",
				evaluateXPathString('string(id("id-element"))', html));
	});

	test("HTML_Atomize_Attribute", function() {
		assertEquals("some attribute",
				evaluateXPathString('string(id("id-attribute")/@attribute)', html));
	});

	test("HTML_Atomize_ProcessingInstruction", function() {

	});

	test("HTML_Atomize_Comment", function() {
		assertEquals("some comment",
				evaluateXPathString('string(id("id-comment")/child::comment())', html));
	});

	test("HTML_Atomize_Text", function() {
		assertEquals("some text",
				evaluateXPathString('string(id("id-text")/child::text())', html));
	});
});