{
  function _join(a)
  {
    if (typeof(a) == "string")
      return a;
    else
    {
      var r = "";
      for (var v in a) { r += _join(a[v]); }
      return r;
    }
  }

  function _node_int(a)
  {
    if (typeof(a) == "string")
      return a;
    var r = [];
    for (var v in a)
    {
        r.push( _node_int( a[v] ) );
    }
    return r;
  }
}

text = spaces? expr:(any_word*) {return _node_int(expr);}
any_word = expr:(lojban_word) spaces? {return expr;}

lojban_word = cmevla / cmavo / gismu / fuhivla / lujvo

cmevla = expr:(&zifcme (any_syl)* &pause / zifcme) { return ["cmevla", _join(expr)]; }
zifcme = (!h (nucleus / glide / h / cns !pause)* cns &pause)

cmavo = expr:(!cmevla !(cns vwl cns (!stress y h? brivla_core / &stress y short_final_rafsi)) !h cluster onset (nucleus h)* nucleus cluster &post_word) {return ["cmavo", _join(expr)];}

gismu = expr:(gismu_like) {return ["gismu", _join(expr)];}
gismu_like = CVC_CCV_rafsi &stress &final_syl cns vwl

fuhivla = expr:(fuhivla_like) {return ["fuhivla", _join(expr)];}
fuhivla_like = fuhivla_head_ext final_syl
fuhivla_head_ext = fuhivla_head syl &stress cns_syl*
fuhivla_head = !rafsi_string !cmavo !(!rafsi_string cns rafsi_string) !h &onset unstressed_syl*

lujvo = expr:(!gismu !fuhivla !cmavo !(init_pair vwl h y onset) brivla_core)  {return ["lujvo", _join(expr)];}

brivla_core = init_rafsi* (fuhivla_like / gismu_CVV_final_rafsi / ((hy_rafsi / y_rafsi / short_rafsi !y) &stress / stressed_fuhivla_rafsi) short_final_rafsi)

any_fuhivla_rafsi = fuhivla_like / fuhivla_rafsi / stressed_fuhivla_rafsi
init_rafsi = (hy_rafsi / y_rafsi) !stress h? / fuhivla_rafsi / !any_fuhivla_rafsi y_less_rafsi !any_fuhivla_rafsi
stressed_fuhivla_rafsi = fuhivla_head_ext onset y
fuhivla_rafsi = &unstressed_syl fuhivla_head onset y h?
rafsi_string = y_less_rafsi* (gismu_CVV_final_rafsi / stressed_y_less_rafsi short_final_rafsi / y_rafsi !stress h? / y_rafsi &stress / stressed_y_less_rafsi? init_pair y / hy_rafsi (!stress h? / &stress))
gismu_CVV_final_rafsi = gismu_like / cns vwl &stress h &final_syl vwl &post_word
short_final_rafsi = &final_syl (cns diphthong / init_pair vwl) &post_word
y_rafsi = (CVC_CCV_rafsi !stress cns / short_rafsi) y

short_rafsi = CVC_CCV_rafsi / cns (vwl &stress h vwl / diphthong) (r &cns / n &r)?
stressed_y_less_rafsi = short_rafsi &stress !y
y_less_rafsi = !y_rafsi short_rafsi !stress !h

CVC_CCV_rafsi = cns vwl cns / init_pair vwl
hy_rafsi = (gismu_like / short_rafsi ) h y

final_syl = onset !y nucleus !cmevla &post_word
unstressed_syl = syl !stress / cns_syl
stress = (cns / glide)* h? y? syl pause
any_syl = onset nucleus coda? / cns_syl
syl = onset !y nucleus coda?
cns_syl = cns &syllabic coda

coda = !any_syl cns &any_syl / syllabic? cns? &pause
onset = h / glide / init
nucleus = vwl / diphthong / y !nucleus
glide = (i / u) &nucleus !glide
diphthong = ([a] u !u / [aeo] i !i) !nucleus
vwl = ([aeoiu] / i / u) !nucleus

i = [i]
u = [u]
y = [y] !(!y nucleus)

cluster = !(cns cns+)
init_pair = &init cns cns !cns
init = (affricate / (s !x / jz !n !liquid)? (pf / (t / d) !l / c / k / x / bgv / m / n !liquid)? liquid?) !cns !glide

affricate = t c / t s / d jz
liquid = l / r
cns = voiced / unvoiced / syllabic
voiced = bgv / d / jz
unvoiced = c / pf / k / s / t / x
syllabic = liquid / m / n
qq = hg !unvoiced
qw = hg !voiced
hg = !h !glide

l = [l] hg
m = [m] hg !z
n = [n] hg !affricate 
r = [r] hg
bgv = [bgv] qq
d = [d] qq
jz = [jz] !jz qq
z = [z] !jz qq
s = [s] !c qw
c = [c] !s !x qw
x = [x] !c !k qw
k = [k] !x qw
pf = [pf] qw
t = [t] qw
h = ['h] &nucleus

post_word = pause / !nucleus lojban_word

pause = space_char+ / EOF
space_char = [.\t\n\r?!\u0020]
spaces = (space_char / y)+ EOF? / EOF
EOF = !.